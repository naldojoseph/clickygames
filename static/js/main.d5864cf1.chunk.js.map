{"version":3,"sources":["components/Wrapper/Wrapper.js","components/Title/Title.js","components/MatchCard/MatchCard.js","App.js","index.js"],"names":["Wrapper","props","className","children","Title","MatchCard","onClick","setClicked","id","alt","name","src","image","correctGuesses","bestScore","clickMessage","App","state","matches","clickedMatch","filter","match","clicked","console","log","i","length","setState","sort","a","b","Math","random","this","map","key","Component","ReactDOM","render","document","getElementById"],"mappings":"imCAKeA,G,MAFC,SAAAC,GAAK,OAAI,yBAAKC,UAAU,WAAWD,EAAME,YCE1CC,G,MAFD,SAAAH,GAAK,OAAI,wBAAIC,UAAU,SAASD,EAAME,Y,OCSrCE,G,YATG,SAAAJ,GAAK,OAEpB,yBAAKK,QAAS,kBAAML,EAAMM,WAAWN,EAAMO,KAAKN,UAAU,iBACzD,yBAAKA,UAAU,iBACd,yBAAKO,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,YCAlCC,EAAiB,EACjBC,EAAY,EACZC,EAAe,wFAyHJC,E,2MApHXC,MAAQ,CACJC,UACAL,iBACAC,YACAC,gB,EAGJR,WAAa,SAAAC,GAGT,IAAMU,EAAU,EAAKD,MAAMC,QAGrBC,EAAeD,EAAQE,QAAO,SAAAC,GAAK,OAAIA,EAAMb,KAAOA,KAI1D,GAAIW,EAAa,GAAGG,QAAQ,CAExBC,QAAQC,IAAK,oBAAsBX,GACnCU,QAAQC,IAAK,eAAiBV,GAE9BD,EAAiB,EACjBE,EAAe,8CAEf,IAAK,IAAIU,EAAI,EAAIA,EAAIP,EAAQQ,OAASD,IAClCP,EAAQO,GAAGH,SAAU,EAGzB,EAAKK,SAAS,CAACZ,iBACf,EAAKY,SAAS,CAAEd,mBAChB,EAAKc,SAAS,CAACT,iBAGZ,GAAIL,EAAiB,GAGxBM,EAAa,GAAGG,SAAU,EAG1BT,IAEAE,EAAe,qBAEXF,EAAiBC,IACjBA,EAAYD,EACZ,EAAKc,SAAS,CAAEb,eAIpBI,EAAQU,MAAK,SAASC,EAAGC,GAAG,MAAO,GAAMC,KAAKC,YAG9C,EAAKL,SAAS,CAAET,YAChB,EAAKS,SAAS,CAACd,mBACf,EAAKc,SAAS,CAACZ,qBACZ,CAGHI,EAAa,GAAGG,SAAU,EAG1BT,EAAiB,EAGjBE,EAAe,mBACfD,EAAY,GACZ,EAAKa,SAAS,CAAEb,cAEhB,IAAK,IAAIW,EAAI,EAAIA,EAAIP,EAAQQ,OAASD,IAClCP,EAAQO,GAAGH,SAAU,EAIzBJ,EAAQU,MAAK,SAASC,EAAGC,GAAG,MAAO,GAAMC,KAAKC,YAG9C,EAAKL,SAAS,CAAET,YAChB,EAAKS,SAAS,CAACd,mBACf,EAAKc,SAAS,CAACZ,mB,wEAKb,IAAD,OACL,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,kBAEA,wBAAIb,UAAU,gBACT+B,KAAKhB,MAAMF,cAGhB,wBAAIb,UAAU,4BAAd,oBACsB+B,KAAKhB,MAAMJ,eAC7B,6BAFJ,eAGiBoB,KAAKhB,MAAMH,WAE5B,yBAAKZ,UAAU,aACf,yBAAKA,UAAU,OACd+B,KAAKhB,MAAMC,QAAQgB,KAAI,SAAAb,GAAK,OACzB,kBAAC,EAAD,CACId,WAAY,EAAKA,WACjBC,GAAIa,EAAMb,GACV2B,IAAKd,EAAMb,GACXI,MAAOS,EAAMT,kB,GA5GnBwB,aCLlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.d5864cf1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\nimport \"./Title.css\";\n\nconst Title = props => <h1 className=\"title\">{props.children}</h1>;\n\nexport default Title;","import React from \"react\";\nimport \"./MatchCard.css\";\n\nconst MatchCard = props => (\n\n\t\t\t<div onClick={() => props.setClicked(props.id)} className=\"card col-md-3\">\n\t\t\t\t<div className=\"img-container\">\n\t\t\t\t\t<img alt={props.name} src={props.image} />\n\t\t\t\t</div>\n\t\t\t</div>\n);\n\nexport default MatchCard;","import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport matches from \"./Match.json\";\nimport \"./App.css\";\nimport MatchCard from \"./components/MatchCard\";\n\nlet correctGuesses = 0;\nlet bestScore = 0;\nlet clickMessage = \"Click on the image to earn a point. However, you can't click on the same image twice!\";\n\nclass App extends Component {\n    \n    // Setting this.state.matches to the matches json array\n    state = {\n        matches,\n        correctGuesses,\n        bestScore,\n        clickMessage\n    };\n\n    setClicked = id => {\n\n        // Make a copy of the state matches array to work with\n        const matches = this.state.matches;\n\n        // Filter for the clicked match\n        const clickedMatch = matches.filter(match => match.id === id);\n\n        // If the matched image's clicked value is already true, \n        // do the game over actions\n        if (clickedMatch[0].clicked){\n\n            console.log (\"Correct Guesses: \" + correctGuesses);\n            console.log (\"Best Score: \" + bestScore);\n\n            correctGuesses = 0;\n            clickMessage = \"You have clicked this one. Let's try again!\"\n\n            for (let i = 0 ; i < matches.length ; i++){\n                matches[i].clicked = false;\n            }\n\n            this.setState({clickMessage});\n            this.setState({ correctGuesses });\n            this.setState({matches});\n\n        // Otherwise, if clicked = false, and the user hasn't finished\n        } else if (correctGuesses < 11) {\n\n            // Set its value to true\n            clickedMatch[0].clicked = true;\n\n            // increment the appropriate counter\n            correctGuesses++;\n            \n            clickMessage = \"Great! Keep going!\";\n\n            if (correctGuesses > bestScore){\n                bestScore = correctGuesses;\n                this.setState({ bestScore });\n            }\n\n            // Shuffle the array to be rendered in a random order\n            matches.sort(function(a, b){return 0.5 - Math.random()});\n\n            // Set this.state.matches equal to the new matches array\n            this.setState({ matches });\n            this.setState({correctGuesses});\n            this.setState({clickMessage});\n        } else {\n\n            // Set its value to true\n            clickedMatch[0].clicked = true;\n\n            // restart the guess counter\n            correctGuesses = 0;\n\n            // Egg on the user to play again\n            clickMessage = \"YOU ARE A CHAMP!\";\n            bestScore = 12;\n            this.setState({ bestScore });\n            \n            for (let i = 0 ; i < matches.length ; i++){\n                matches[i].clicked = false;\n            }\n\n            // Shuffle the array to be rendered in a random order\n            matches.sort(function(a, b){return 0.5 - Math.random()});\n\n            // Set this.state.matches equal to the new matches array\n            this.setState({ matches });\n            this.setState({correctGuesses});\n            this.setState({clickMessage});\n\n        }\n    };\n\n    render() {\n        return (\n            <Wrapper>\n                <Title>Shreklick</Title>\n        \n                <h3 className=\"scoreSummary\">\n                    {this.state.clickMessage}\n                </h3>\n                \n                <h3 className=\"scoreSummary card-header\">\n                    Correct Guesses: {this.state.correctGuesses} \n                    <br />\n                    Best Score: {this.state.bestScore} \n                </h3>\n                <div className=\"container\">\n                <div className=\"row\">\n                {this.state.matches.map(match => (\n                    <MatchCard\n                        setClicked={this.setClicked}\n                        id={match.id}\n                        key={match.id}\n                        image={match.image}\n                    />\n                ))}\n                </div>\n                </div>\n\n            </Wrapper>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}